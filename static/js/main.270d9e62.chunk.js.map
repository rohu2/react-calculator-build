{"version":3,"sources":["components/Button.jsx","components/CalculatorBody.jsx","components/Screen.jsx","components/EqualsButton.jsx","components/ClearButton.jsx","App.js","index.js"],"names":["Button","symbol","expression","setExpression","className","onClick","console","c","CalculatorBody","symbols","useState","evaluateExpression","exp","i","length","cur","next","curIdx","nextIdx","pos","indexOf","cloneExpression","testExpression","splice","eval","clearScreen","class","numbers","map","operators","func","Screen","EqualsButton","ClearButton","App","equals","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JAaeA,IATA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OAASC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAClC,OAEO,wBAAQC,UAAU,oBAAoBC,QAAS,WAAMF,EAAc,GAAD,mBAAKD,GAAL,CAAiBD,MAAnF,SAAkGA,M,ohCCDzFK,QAALC,E,aAETC,eAAiB,SAAjBA,eAAkB,MAAe,IAAdC,QAAa,KAAbA,QAAa,UAEFC,oDAAS,IAFP,yLAE/BR,WAF+B,cAEnBC,cAFmB,cAItC,SAASQ,qBAIT,IAFA,IAAIC,IAAM,GAEDC,EAAI,EAAGA,EAAIX,WAAWY,OAAQD,IACnCD,KAAOV,WAAWW,GAItB,IAAK,IAAIA,GAAI,EAAGA,GAAID,IAAIE,OAAQD,KAAK,CAErCN,EAAE,CAACM,OAEH,IAAIE,IAAMH,IAAIC,IACVG,KAAOJ,IAAIC,GAAE,GACbI,OAASJ,GACTK,QAAUL,GAAG,EAEjB,GAAW,MAARE,KACC,GAAY,MAATC,MAAwB,MAARA,KAEf,YAKH,GAAW,MAARD,KACJ,GAAY,MAATC,MAAyB,MAATA,KAEf,YAMH,GAAW,MAARD,KAAwB,MAATC,MAAwB,MAARD,KAAwB,MAATC,KAAgB,CAGlE,IAAIG,IAAMjB,WAAWkB,QAAQL,KAGzBM,gBAAe,qKAAOnB,YACtBoB,eAAc,qKAAOpB,YAEzBmB,gBAAgBE,OAAOJ,IAAK,EAAG,KAE/BP,IAAM,GAKN,IAAK,IAAIC,IAAI,EAAGA,IAAKQ,gBAAgBP,OAAQD,MAC7CD,KAAQS,gBAAgBR,KACxBN,EAAEc,gBAAgBR,OAQtBV,cAAc,CAACqB,KAAKZ,OAIpB,SAASa,cACLtB,cAAc,IAKd,OACI,mEAAKC,UAAU,kBAAf,UAEI,2DAAC,uCAAD,CAAQF,WAAYA,aAGpB,mEAAKE,UAAU,SAAf,UAEA,mEAAMsB,MAAM,UAAZ,SACCjB,QAAQkB,QAAQC,KAAI,SAAC3B,GAAW,OAAO,2DAAC,uCAAD,CAAQA,OAAQA,EAAQC,WAAYA,WAAaC,cAAeA,qBAIxG,mEAAMuB,MAAM,oBAAZ,SACCjB,QAAQoB,UAAUD,KAAI,SAAC3B,GAAW,OAAO,2DAAC,uCAAD,CAAQA,OAAQA,EAAQC,WAAYA,WAAaC,cAAeA,qBAI1G,2DAAC,6CAAD,CAAc2B,KAAMnB,qBAGpB,2DAAC,4CAAD,CAAamB,KAAML,qBAUhBjB,sC,6BClHf,gBAYeuB,IAVA,SAAC,GAAkB,IAAjB7B,EAAgB,EAAhBA,WACb,OACI,qBAAKE,UAAY,oBAAjB,SACKF,M,6BCLb,gBAae8B,IAXM,SAAC,GAAc,IAAZF,EAAW,EAAXA,KAEpB,OACI,wBAAQ1B,UAAU,oBAAoBC,QAASyB,EAA/C,iB,6BCLR,gBAaeG,IAXK,SAAC,GAAc,IAAZH,EAAW,EAAXA,KAEnB,OACI,wBAAQ1B,UAAU,oBAAoBC,QAASyB,EAA/C,mB,8ICoBOI,MApBf,WASE,OACE,qBAAK9B,UAAU,MAAf,SAGJ,cAACI,EAAA,EAAD,CAAgBC,QAXA,CAEdkB,QAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC5BE,UAAW,CAAC,IAAI,IAAI,IAAI,IAAK,KAC7BM,OAAQ,CAAC,WCLXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.270d9e62.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Button = ({symbol , expression, setExpression}) => {\n    return (\n        \n           <button className='calculator-button' onClick={()=>{ setExpression([...expression, symbol])  }} >{symbol}</button> \n        \n    )\n}\n\n\nexport default Button","import Button from './Button';\nimport Screen from './Screen';\nimport {useState} from 'react'\nimport EqualsButton from './EqualsButton'\nimport ClearButton from './ClearButton'\n\nconst {['log']:c} = console\n\nconst CalculatorBody = ({symbols}) => {\n\nconst [expression, setExpression] = useState([])\n\nfunction evaluateExpression() {\n    \nlet exp = '';\n\nfor (let i = 0; i < expression.length; i++) {\n    exp += expression[i]\n    }\n    \n\nfor (let i = 0; i < exp.length; i++) {\n\nc({i})\n\nlet cur = exp[i]\nlet next = exp[i+1]\nlet curIdx = i\nlet nextIdx = i +1\n\nif(cur === '*'){\n    if(next === '*' || next=== '/'){\n\n        return\n\n    }\n}\n\nelse if(cur === '/'){\n    if(next === '*' || next === '/'){\n\n        return\n\n    }\n}\n\n\nelse if(cur === '-' && next === '-' || cur === '+' && next === '+'   ){\n  \n\n    let pos = expression.indexOf(cur)\n\n\n    let cloneExpression = [...expression] \n    let testExpression = [...expression] \n\n    cloneExpression.splice(pos, 2, '+');\n \n    exp = ''\n\n    \n \n\n    for (let i = 0; i <  cloneExpression.length; i++) {\n    exp +=  cloneExpression[i]\n    c(cloneExpression[i])\n    }\n      \n}\n\n    }\n\n  \nsetExpression([eval(exp)])\n\n}\n\nfunction clearScreen() {\n    setExpression([])\n}\n\n\n\n    return (\n        <div className='calculator-body'>\n            \n            <Screen expression={expression}/>\n            \n            \n            <div className='keypad'>\n\n            <span class='numbers'>\n            {symbols.numbers.map((symbol)=>{ return <Button symbol={symbol} expression={expression}  setExpression={setExpression} />  })}\n            </span>\n\n\n            <span class='calculator-column'>\n            {symbols.operators.map((symbol)=>{ return <Button symbol={symbol} expression={expression}  setExpression={setExpression} />  })}\n            </span>\n\n\n            <EqualsButton func={evaluateExpression} />\n\n\n            <ClearButton func={clearScreen} />\n\n            </div>\n\n        </div>\n    )\n}\n\n\n\nexport default CalculatorBody","import React from 'react'\n\nconst Screen = ({expression}) => {\n    return (\n        <div className = 'calculator-screen'>\n            {expression}\n        </div>\n    )\n}\n\n\n\nexport default Screen","import React from 'react'\n\nconst EqualsButton = ({ func }) => {\n\n    return (\n        <button className='calculator-button' onClick={func} >=</button>\n    )\n\n\n}\n\n\n\nexport default EqualsButton","import React from 'react'\n\nconst ClearButton = ({ func }) => {\n\n    return (\n        <button className='calculator-button' onClick={func} > C </button>\n    )\n\n\n}\n\n\n\nexport default ClearButton","\nimport './App.css';\nimport CalculatorBody from './components/CalculatorBody';\n\n\nfunction App() {\n\nconst symbols = { \n\n  numbers: [1,2,3,4,5,6,7,8,9,0,],\n  operators: ['+','-','*','/', '.'],\n  equals: ['='],\n\n   }\n  return (\n    <div className=\"App\">\n    \n\n<CalculatorBody symbols={symbols}/>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}